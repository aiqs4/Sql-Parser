{
module SqlLexer


open System
open SqlParser
open Microsoft.FSharp.Text.Lexing

open StringHelper

let keywords =
    [
        "SELECT",      SELECT;
        "TOP",         TOP;
        "PERCENT",     PERCENT;
        "DISTINCT",    DISTINCT;
        "FROM",        FROM;
        "WHERE",       WHERE;
        "GROUP",       GROUP;
        "HAVING",      HAVING;
        "ORDER",       ORDER;
        "BY",          BY;
        "JOIN",        JOIN;
        "INNER",       INNER;
        "LEFT",        LEFT;
        "RIGHT",       RIGHT;
        "CROSS",       CROSS;
        "FULL",        FULL;
        "APPLY",       APPLY;
        "OUTER",       OUTER;

        "INSERT",      INSERT;
        "VALUES",      VALUES;
        "INTO",        INTO;
        "UPDATE",      UPDATE;
        "DELETE",      DELETE;

        "EXCEPT",      EXCEPT; 
        "UNION",       UNION;
        "INTERSECT",   INTERSECT;

        "SET",         SET;
        "DEFAULT",     DEFAULT;
        "NULL",        NULL;

        "ASC",         ASC;
        "DESC",        DESC;
        "AND",         AND;
        "OR",          OR;
//        "NOT",         NOT;
        "IN",          IN;
        "LIKE",        LIKE;

        "ALL",         ALL;
        "ANY",         ANY;
        "BETWEEN",     BETWEEN;
        "SOME",        SOME;

        "ON",          ON;

        "AS",          AS;
        "DECLARE",     DECLARE;

        "IF",          IF;
        "ELSE",        ELSE;
        "WHILE",       WHILE;
        "BEGIN",       BEGIN;
        "END",         END;
        "TRY",         TRY;
        "CATCH",       CATCH;
        "RAISERROR",   RAISERROR;
        "PRINT",       PRINT; //TODO: not yet implemented

        "EXISTS",      EXISTS;
        "NOT",         NOT;

        "FOR",         FOR;
        "AFTER",       AFTER;
        "INSTEAD",     INSTEAD;
        "OF",          OF;
        "REPLICATION", REPLICATION;

        "OFF",       OFF;
        "ON",        ON;

        "NOCOUNT",   NOCOUNT;
        "QUOTED_IDENTIFIER", QUOTED_IDENTIFIER;
        "ANSI_NULLS", ANSI_NULLS;
        "OUTPUT",     OUTPUT;

        "GO", GO;

        "EXEC",       EXEC;
        "EXECUTE",    EXECUTE;
        "RECOMPILE",  RECOMPILE;

        "TRAN",        TRAN;
        "TRANSACTION", TRANSACTION;
        "ROLLBACK",    ROLLBACK;
        "COMMIT",      COMMIT;
        "SAVE",        SAVE;
        "MARK",        MARK;
        "WORK",        WORK;

        "WITH",        WITH;

        "CREATE",      CREATE;
        "DROP",        DROP;
        "ALTER",       ALTER;
        "TABLE",       TABLE;
        "PROC",        PROC;
        "PROCEDURE",   PROCEDURE;
        "TRIGGER",     TRIGGER;
        "FUNCTION",    FUNCTION;
        "VIEW",        VIEW;
        "TYPE",        TYPE;
        "INDEX",       INDEX;

        "NOEXPAND",    NOEXPAND;

        "CURSOR",       CURSOR;
        "LOCAL",        LOCAL; 
        "GLOBAL",       GLOBAL; 
        "FORWARD_ONLY", FORWARD_ONLY; 
        "SCROLL",       SCROLL; 
        "STATIC",       STATIC; 
        "KEYSET",       KEYSET; 
        "DYNAMIC",      DYNAMIC; 
        "FAST_FORWARD", FAST_FORWARD;
        "READ_ONLY",    READ_ONLY; 
        "SCROLL_LOCKS", SCROLL_LOCKS; 
        "OPTIMISTIC",   OPTIMISTIC; 
        "TYPE_WARNING", TYPE_WARNING;
        "OPEN",         OPEN;
        "CLOSE",        CLOSE;
        "DEALLOCATE",   DEALLOCATE;
        "FETCH",        FETCH;

        "NEXT",         NEXT;
        "PRIOR",        PRIOR;
        "FIRST",        FIRST; 
        "LAST",         LAST;
        "ABSOLUTE",     ABSOLUTE; 
        "RELATIVE",     RELATIVE;

        "RANK",         RANK;
        "NTILE",        NTILE;
        "DENSE_RANK",   DENSE_RANK; 
        "ROW_NUMBER",   ROW_NUMBER;
        "OVER",         OVER;
        "PARTITION",    PARTITION;

        "FORCESCAN",    FORCESCAN;
        "FORCESEEK",    FORCESEEK;
        "NOLOCK",       NOLOCK;
        "KEEPIDENTITY", KEEPIDENTITY;
        "KEEPDEFAULTS", KEEPDEFAULTS;
        "FASTFIRSTROW", FASTFIRSTROW; 
        "HOLDLOCK",     HOLDLOCK;
        "IGNORE_CONSTRAINTS", IGNORE_CONSTRAINTS;
        "IGNORE_TRIGGERS",    IGNORE_TRIGGERS;
        "NOWAIT",             NOWAIT;
        "PAGLOCK",            PAGLOCK;
        "READCOMMITTED",      READCOMMITTED;
        "READCOMMITTEDLOCK",  READCOMMITTEDLOCK;
        "READUNCOMMITTED",    READUNCOMMITTED;
        "READPAST",           READPAST;
        "REPEATABLEREAD",     REPEATABLEREAD;
        "ROWLOCK",            ROWLOCK;
        "SERIALIZABLE",       SERIALIZABLE;
        "TABLOCK",            TABLOCK;
        "TABLOCKX",           TABLOCKX;
        "UPDLOCK",            UPDLOCK;
        "XLOCK",              XLOCK;

    ] |> Map.ofList


let ops =
    [
        "=",    EQ; 
        "<",    LT;
        "<=",   LE;
        ">",    GT;
        ">=",   GE;
        "<>",   LTGT; //TODO: check if this is used in grammer
        "!=",   NE;

        "+=",   PLUS_EQ;
        "-=",   MINUS_EQ;
        "*=",   STAR_EQ;
        "/=",   DIV_EQ;
        "%=",   MOD_EQ; 
        "&=",   AND_EQ;
        "^=",   XOR_EQ; 
        "|=",   OR_EQ;

        "!<",   NLT;
        "!>",   NGT;

        "+",    PLUS;
        "-",    MINUS;
        "/",    DIV;
        "*",    STAR;
        "%",    MODULO;

        "~",    BIT_NOT;
        "&",    BIT_AND;
        "^",    BIT_XOR;
        "|",    BIT_OR;

        //"::",   SCOPE_RESOLUTION_OPERATOR //TODO: not yet implemented
    ] |> Map.ofList
}


let char        = ['a'-'z' 'A'-'Z']
let digit       = ['0'-'9']
let int         = '-'?digit+
let float       = '-'?digit+ '.' digit+
let identifier  = char(char|digit|['-' '_' '.'])* //TODO: dot's should be handled at parser level!
let whitespace  = [' ' '\t']
let newline     = ('\n' | '\r' '\n')  // "\n\r" | '\n' | '\r'
let operator    = ">" | ">=" | "<>" | "<" | "<=" | "=" | "!="
let comment     = '-' '-' [^ '\n' '\r']* (* eat up one-line comments *)

rule tokenize = parse
    | comment
    | whitespace    { tokenize lexbuf }
    | newline       { lexbuf.EndPos <- lexbuf.EndPos.NextLine; tokenize lexbuf; }
    | int           { INT(Int32.Parse(LexBuffer<_>.LexemeString lexbuf)) }
    | float         { FLOAT(Double.Parse(LexBuffer<_>.LexemeString lexbuf)) }
    | operator      { ops.[LexBuffer<_>.LexemeString lexbuf] }
    | identifier    { match keywords.TryFind((LexBuffer<_>.LexemeString lexbuf).ToUpper()) with //TODO: FIXME: can this be written be smarter? i mean: ToUpper
                      | Some(token) -> token
                      | None -> ID(LexBuffer<_>.LexemeString lexbuf) }
    | ','           { COMMA }
    | ';'           { SEMI }
    | '('           { LPAREN }
    | ')'           { RPAREN }
    | '@'           { AT }
    | '"'           { ID(doubleQuoted lexbuf.StartPos "" lexbuf) }
    | '\''          { STRING(singleQuoted lexbuf.StartPos "" lexbuf) }
    | "/*"          { multiComment 0 lexbuf; tokenize lexbuf }
    | '['           { ID(bracketQuoted lexbuf.StartPos "" lexbuf) }

    //| '.'         { DOT }
    | eof           { EOF }
and multiComment level = parse
    | newline { lexbuf.EndPos <- lexbuf.EndPos.NextLine; multiComment level lexbuf; }
    | "*/"    { if level = 0 then () //token lexbuf
                else multiComment (level-1) lexbuf
              }
    | "/*"    { multiComment (level+1) lexbuf }
    //| eof     { raise End_of_file } //TODO: inside nested structure EOF is a exception!
    | eof     { failwith "end of file in comment at or near %A" lexbuf.StartPos }
    | _       { multiComment level lexbuf }

and doubleQuoted pos s = parse
    | newline   { lexbuf.EndPos <- lexbuf.EndPos.NextLine; doubleQuoted pos (s + "\n") lexbuf; }
    | '\\' '"'  { doubleQuoted pos (s + "\"") lexbuf }
    | '"'       { s }
    //| eof       { raise End_of_file } //TODO: inside nested structure EOF is a exception!
    | eof       { failwithf "end of file in quoted identifier at or near %A" pos }
    | _         { doubleQuoted pos s lexbuf }

and singleQuoted pos s = parse
    | newline { lexbuf.EndPos <- lexbuf.EndPos.NextLine; singleQuoted pos (s + "\n") lexbuf; }
    | "''"    { singleQuoted pos (s + "'") lexbuf }
    | '\''    { s }
    //| eof     { raise End_of_file } //TODO: inside nested structure EOF is a exception!
    | eof     { failwithf "end of file in string at or near %A" pos }
    | _       { singleQuoted pos s lexbuf }

and bracketQuoted pos s = parse
    | newline { lexbuf.EndPos <- lexbuf.EndPos.NextLine; bracketQuoted pos (s + "\n") lexbuf; }
    | "\\]"   { bracketQuoted pos (s + "]") lexbuf }
    | ']'     { s }
    //| eof     { raise End_of_file } //TODO: inside nested structure EOF is a exception!
    | eof     { failwithf "end of file in quoted identifier at or near %A" pos }
    | _       { bracketQuoted pos s lexbuf }


     